
application {
    config {
        baseName stock
        applicationType monolith
        packageName ga.aninf.stock
        authenticationType jwt
        prodDatabaseType postgresql
        devDatabaseType	h2Disk
        clientFramework angularX
        testFrameworks [gatling]
        languages [en, fr]
        nativeLanguage fr
        serverPort 8080
    }
    entities *
}

entity Entrepot {
    id UUID
    libelle String required unique
    slug String required unique

    deleteAt Instant
    createdBy String required maxlength(50)
    createdDate Instant
    lastModifiedBy String maxlength(50)
    lastModifiedDate Instant
}

entity Structure {
    id UUID
    libelle String required

    deleteAt Instant
    createdBy String required maxlength(50)
    createdDate Instant
    lastModifiedBy String maxlength(50)
    lastModifiedDate Instant
}

entity Produit {
    id UUID
    libelle String required
    description TextBlob
    slug String required unique
    deleteAt Instant

    createdBy String required maxlength(50)
    createdDate Instant
    lastModifiedBy String maxlength(50)
    lastModifiedDate Instant

}

entity MouvementStock {
    id UUID
    quantité Long required

    deleteAt Instant
    createdBy String required maxlength(50)
    createdDate Instant
    lastModifiedBy String maxlength(50)
    lastModifiedDate Instant
}

entity Stock {
    id UUID
    quantité Long required

    deleteAt Instant
    createdBy String required maxlength(50)
    createdDate Instant
    lastModifiedBy String maxlength(50)
    lastModifiedDate Instant
}

entity Inventaire {
    id UUID
    quantité Long required

    deleteAt Instant
    createdBy String required maxlength(50)
    createdDate Instant
    lastModifiedBy String maxlength(50)
    lastModifiedDate Instant
}

entity Vente {
    id UUID
    quantité Long required
    montant BigDecimal required

    deleteAt Instant
    createdBy String required maxlength(50)
    createdDate Instant
    lastModifiedBy String maxlength(50)
    lastModifiedDate Instant
}

entity Abonnement {
    id UUID
    dateDebut Instant required
    dateFin Instant required
    statutAbonnement StatutAbonnement required
    prix BigDecimal required


    deleteAt Instant
    createdBy String required maxlength(50)
    createdDate Instant
    lastModifiedBy String maxlength(50)
    lastModifiedDate Instant
}

entity Paiement {
    id UUID
    montant BigDecimal required
    methodePaiement MethodePaiement required
    statutPaiement StatutPaiement required

    deleteAt Instant
    createdBy String required maxlength(50)
    createdDate Instant
    lastModifiedBy String maxlength(50)
    lastModifiedDate Instant
}

entity PlansAbonnement {
    id UUID
    libelle String required
    description TextBlob required
    prix BigDecimal required
    Duree String
    Avantage String

    deleteAt Instant
    createdBy String required maxlength(50)
    createdDate Instant
    lastModifiedBy String maxlength(50)
    lastModifiedDate Instant
}

//ENUM

enum StatutAbonnement{
    ACTIF , EXPIRE, ANNULE
}

enum MethodePaiement{
    PAYPAL , AIRTEL_MONEY, MOOV_MONEY, CARTE_VISA
}

enum StatutPaiement{
    CONFIRME , EN_ATTENTE, ANNULE
}


/*
entity TypeDocument {
    id UUID
    libelle String required
    deleteAt Instant
}
*/

//entity Employe {
//    id UUID
//    firstName String required
//    deleteAt Instant
//}




//entity DemandeConge {
//    id UUID
//    dateDebut LocalDate required
//    dateFin LocalDate required
//    dateRetour LocalDate required
//    motif TextBlob
//    nombreJours Integer required
//    annee Integer
//    deleteAt Instant
//    entiteId String
//    // Ajoutez d'autres propriétés de la demande de congé selon vos besoins
//}

//entity Ferie {
//    id UUID
//    annee Integer required
//    dateDebut LocalDate required
//    // Ajoutez d'autres propriétés de l'étape selon vos besoins
//
//}

//entity EntiteAdministrative {
//    id UUID
//    libelle String required
//    code String required unique
//}




//entity Document {
//    id UUID
//    fileSize Long required
//    filename String required
//    deleteAt Instant
//}

//


//entity TypeConge {
//    id UUID
//    libelle String required
//    code String required unique
//    dureeMax Integer required
//    // Ajoutez d'autres propriétés de la demande de congé selon vos besoins
//
//}

//entity Statut {
//    id UUID
//    tableName TableName required
//    libelle String required
//    code String required
//    // Ajoutez d'autres propriétés de la demande de congé selon vos besoins
//
//}
//
//entity TypeEntiteAdministrative {
//    id UUID
//    libelle String required
//    code String required
//    // Ajoutez d'autres propriétés de la demande de congé selon vos besoins
//
//}



//RELATION

/*
relationship OneToMany {
    HistoriqueEtape{documents} to Document{historiqueDemandeEtape}
    Etape{typeDocumentDemandes} to TypeDocument
    Etape{documentPourGeneres} to Document
}
*/

relationship OneToOne{
    Application{compte(login) } to User with builtInEntity
}

relationship ManyToOne {

    Etape{circuitValidation(libelle) required} to CircuitValidation{etapes}
    //  Etape{validateur(firstName) required } to Employe{etapes(libelle)}

    //  Document {typeDocument(libelle) required } to TypeDocument

    //  TypeDocument {etape(libelle) required } to Etape

    LienEtape{etapeDepart(libelle) required} to Etape{liensSortants}
    LienEtape{etapeArrivee(libelle) required} to Etape{liensEntrants}
    LienEtape{circuitValidation(libelle) required} to CircuitValidation{lienEtapes}

    //  DemandeConge{circuitValidation(libelle) required} to CircuitValidation
    //  DemandeConge{etapeActuelle(libelle) required} to Etape
    //  DemandeConge{employe(firstName) required} to Employe{demandeConges}
    //  DemandeConge{entiteAdministrative(libelle) required} to EntiteAdministrative{demandeConges}
    //  DemandeConge{typeConge(libelle) required} to TypeConge
    //  DemandeConge{statut(libelle) required} to Statut


    HistoriqueEtape{etape(libelle) required} to Etape

    CircuitValidation{application(libelle) required} to Application
    //  HistoriqueEtape{demandeConge required} to DemandeConge{historiqueDemandeEtapes}
    //  HistoriqueEtape{entiteAdministrative(libelle) required} to EntiteAdministrative{historiqueDemandeEtapes}

    //  EntiteAdministrative{parent(libelle)} to EntiteAdministrative{child(libelle)}
    //  EntiteAdministrative{typeEntiteAdministrative(libelle) required } to TypeEntiteAdministrative


}
/*
relationship ManyToMany {



}
*/

// Set pagination options
paginate * with pagination

// Use Data Transfer Objects (DTO)
dto * with mapstruct

// Set service options to all except few serviceImpl
service all with serviceClass

filter *

// Set an angular suffix
// angularSuffix * with mySuffix


/*
1. Fonctionnalités de base :

Présentation du bar :
Informations générales (nom, adresse, horaires d'ouverture, etc.).
Photos et vidéos de l'établissement.
Menu et carte des boissons.
Événements et soirées à venir.
Réservation :
Possibilité de réserver une table en ligne.
Choix de la date, de l'heure et du nombre de personnes.
Confirmation de la réservation par email ou SMS.
Commande et paiement :
Passer commande en ligne depuis l'application.
Choix des boissons et/ou plats.
Paiement sécurisé via l'application.
Suivi de la commande en temps réel.
2. Fonctionnalités pour fidéliser la clientèle :

Programme de fidélité :
Cumuler des points pour chaque commande.
Bénéficier de réductions et d'avantages exclusifs.
Offrir des cadeaux et des surprises aux clients fidèles.
Notifications push :
Informer les clients des offres spéciales, des événements à venir et des promotions en cours.
Personnaliser les notifications en fonction des préférences des clients.
Jeux et animations :
Proposer des jeux interactifs et des animations pour divertir les clients.
Organiser des concours et des quiz avec des prix à gagner.
Créer une communauté autour du bar.
3. Fonctionnalités pour améliorer la gestion du bar :

Gestion des stocks :
Suivre les stocks de boissons et de nourriture en temps réel.
Passer des commandes automatiques aux fournisseurs.
Gérer les inventaires et les livraisons.
Statistiques et analyses :
Analyser les ventes et les performances du bar.
Identifier les tendances et les produits les plus populaires.
Adapter l'offre en fonction des besoins des clients.
Gestion du personnel :
Planifier les horaires du personnel.
Affecter les tâches aux employés.
Communiquer avec le personnel en temps réel.

4. Fonctionnalités pour se démarquer de la concurrence :

Réalité augmentée :
Offrir des expériences immersives et interactives aux clients.
Transformer l'environnement du bar en un monde fantastique ou futuriste.
Proposer des jeux et des animations en réalité augmentée.
Réseaux sociaux :
Intégrer les réseaux sociaux à l'application.
Permettre aux clients de partager leurs photos et leurs expériences.
Organiser des concours et des événements sur les réseaux sociaux.
Service de livraison :
Proposer un service de livraison à domicile pour les boissons et la nourriture.
Gérer les commandes et les livraisons en ligne.
Développer la notoriété du bar et toucher une nouvelle clientèle.
En plus de ces fonctionnalités, il est important de :

Personnaliser l'application à l'image du bar et de ses besoins spécifiques.
Proposer une interface intuitive et facile à utiliser.
Assurer la sécurité des données des utilisateurs.
En misant sur les fonctionnalités les plus pertinentes pour le gérant de bar et en offrant une expérience utilisateur optimale, votre application web aura un impact positif sur son activité et fidélisera sa clientèle.

N'hésitez pas à me contacter si vous avez besoin de plus d'informations ou d'aide pour développer votre application.

Voici quelques exemples d'applications web réussies pour des bars :

https://thetabletap.com/bartab/
https://www.netapp.com/data-management/ontap-data-management-software/
https://bevspot.com/
Ces applications peuvent vous inspirer et vous donner des idées pour votre propre application.



*/

/*

1. Analyse des besoins

Nous identifions les entités principales ainsi que les relations entre elles, en nous basant sur les fonctionnalités fournies.

Entités principales : Structure, Entrepôt,  Produit, mouvementStock , Employé ,Catégorie, Client, Inventaire, Vente, Réservation, Événement, Finance, Menu, Promotion, Réservation en ligne, Conformité réglementaire.


Relations :

Entrepôt :

Un entrepôt représente un emplacement physique où les stocks sont stockés.
Chaque entrepôt peut être associé à un ou plusieurs Structures.

Structure :

Un Structure représente un établissement où les ventes sont effectuées et les stocks sont utilisés.
Chaque Structure est associé à un entrepôt.

Employe :

Une structure emploi plusieur employés
un employé a une structure

Produit :

Un produit représente un article spécifique pouvant être vendu dans le Structure.
Chaque produit est associé à une catégorie.
Chaque produit peut avoir plusieurs mouvements de stock.

Catégorie de Produit :

Une catégorie de produit regroupe des produits similaires.
Chaque catégorie peut contenir plusieurs produits.

Mouvement de Stock :

Un mouvement de stock représente une transaction affectant la quantité de stock d'un produit dans un entrepôt.
Chaque mouvement de stock est associé à un produit et à un entrepôt.
Un mouvement de stock peut être entrant (réception de marchandises) ou sortant (vente, utilisation interne).
Chaque mouvement de stock enregistre la quantité entrante ou sortante ainsi que la date de la transaction.

Stock par Entrepôt :

Une table de stock par entrepôt enregistre la quantité de chaque produit disponible dans chaque entrepôt.
Chaque enregistrement est associé à un produit et à un entrepôt.
La quantité de stock est mise à jour à chaque mouvement de stock entrant ou sortant.

Inventaire :

Un inventaire représente un état actuel des stocks dans un entrepôt à un moment donné.
Chaque inventaire est associé à un entrepôt et une date.
Pour chaque produit dans l'inventaire, la quantité de stock est enregistrée.

Vente :

Une vente représente une transaction où un produit est vendu à un client dans un Structure.
Chaque vente est associée à un Structure, un produit et une quantité vendue.
Les ventes affectent le stock disponible dans l'entrepôt associé au Structure.

Table Abonnements :

ID_Abonnement (Clé primaire)
ID_Utilisateur (Clé étrangère faisant référence à la table Utilisateurs)
Date_debut
Date_fin
Statut (par exemple : actif, expiré, annulé, etc.)
Type_abonnement (par exemple : mensuel, annuel, premium, standard, etc.)
Prix
Méthode de paiement

Table Plans d'abonnement :

ID_Plan (Clé primaire)
Nom_plan
Description
Prix
Durée (par exemple : mensuel, annuel, etc.)
Avantages (par exemple : accès à des fonctionnalités premium, support prioritaire, etc.)

Réservation :

Possibilité de réserver une table en ligne.
Choix de la date, de l'heure et du nombre de personnes.
Confirmation de la réservation par email ou SMS.

Les employés peuvent être planifiés pour des quarts de travail et peuvent être associés à des ventes.


Un gerant ne peux pas faire deux ou trois jours sans conexion pour envoyer les données


2. Conception conceptuelle

Nous créons un schéma conceptuel en identifiant les entités, leurs attributs et les relations entre elles.

Entités :
 -Entrepot (id, libelle)
 -Structure (id, libelle)
 -Catégorie (id,libelle)
 -Produit (id,libelle, id_categorie)
 -MouvementStock (id, id_produit, id_entrepot, type_mouvement, Quantité, date_mouvement)
 -Stock (id, id_entrepot, id_Produit, Quantité)
 -Inventaire (id, id_entrepot, date_inventaire,id_produit, Quantité)
 -Vente (id, id_vente, id_structure, id_produit, quantié, Date_time_vente, montant)
 -Utilisateur (id, Nom, Mot de passe, Type d'utilisateur).


 //Abonnement
 -Abonnements (ID_Abonnement, ID_Utilisateur, Date_debut, Date_fin, Statut, Type_abonnement, Prix, Méthode_de_paiement, ...)
 -Plans_abonnement (ID_Plan, Nom_plan, Description, Prix, Durée, Avantages, ...)
 -Paiement()

 //Reservation
 -Réservation (ID_Réservation,	ID_Client,	Date_Réservation,	Heure_Réservation,	Nombre_Personnes,	ID_Table)
 -Table (ID_Table,	Numéro,	Capacité,	ID_TypeTablee)
 -TypeTable (ID_TypeTable,	Description)




Associations : Relations entre les entités définies dans l'étape précédente.

3. Conception logique


4. Conception physique
Nous définissons les spécifications techniques pour la mise en œuvre de la base de données, telles que le type de système de gestion de base de données (SGBD), les index, les contraintes d'intégrité, etc.

Choix du SGBD : (par exemple, MySQL, PostgreSQL, SQL Server, etc.)
Définition des index : Pour optimiser les performances des requêtes.
Contraintes d'intégrité : Pour garantir l'intégrité des données.

*/