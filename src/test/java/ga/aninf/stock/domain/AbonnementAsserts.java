package ga.aninf.stock.domain;

import static ga.aninf.stock.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class AbonnementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbonnementAllPropertiesEquals(Abonnement expected, Abonnement actual) {
        assertAbonnementAutoGeneratedPropertiesEquals(expected, actual);
        assertAbonnementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbonnementAllUpdatablePropertiesEquals(Abonnement expected, Abonnement actual) {
        assertAbonnementUpdatableFieldsEquals(expected, actual);
        assertAbonnementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbonnementAutoGeneratedPropertiesEquals(Abonnement expected, Abonnement actual) {
        assertThat(expected)
            .as("Verify Abonnement auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbonnementUpdatableFieldsEquals(Abonnement expected, Abonnement actual) {
        assertThat(expected)
            .as("Verify Abonnement relevant properties")
            .satisfies(e -> assertThat(e.getDateDebut()).as("check dateDebut").isEqualTo(actual.getDateDebut()))
            .satisfies(e -> assertThat(e.getDateFin()).as("check dateFin").isEqualTo(actual.getDateFin()))
            .satisfies(e -> assertThat(e.getStatutAbonnement()).as("check statutAbonnement").isEqualTo(actual.getStatutAbonnement()))
            .satisfies(e -> assertThat(e.getPrix()).as("check prix").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrix()))
            .satisfies(e -> assertThat(e.getDeleteAt()).as("check deleteAt").isEqualTo(actual.getDeleteAt()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbonnementUpdatableRelationshipsEquals(Abonnement expected, Abonnement actual) {
        assertThat(expected)
            .as("Verify Abonnement relationships")
            .satisfies(e -> assertThat(e.getStructure()).as("check structure").isEqualTo(actual.getStructure()))
            .satisfies(e -> assertThat(e.getPlansAbonnement()).as("check plansAbonnement").isEqualTo(actual.getPlansAbonnement()))
            .satisfies(e -> assertThat(e.getPaiement()).as("check paiement").isEqualTo(actual.getPaiement()));
    }
}
