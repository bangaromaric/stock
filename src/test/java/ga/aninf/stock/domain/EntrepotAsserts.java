package ga.aninf.stock.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EntrepotAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntrepotAllPropertiesEquals(Entrepot expected, Entrepot actual) {
        assertEntrepotAutoGeneratedPropertiesEquals(expected, actual);
        assertEntrepotAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntrepotAllUpdatablePropertiesEquals(Entrepot expected, Entrepot actual) {
        assertEntrepotUpdatableFieldsEquals(expected, actual);
        assertEntrepotUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntrepotAutoGeneratedPropertiesEquals(Entrepot expected, Entrepot actual) {
        assertThat(expected)
            .as("Verify Entrepot auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntrepotUpdatableFieldsEquals(Entrepot expected, Entrepot actual) {
        assertThat(expected)
            .as("Verify Entrepot relevant properties")
            .satisfies(e -> assertThat(e.getLibelle()).as("check libelle").isEqualTo(actual.getLibelle()))
            .satisfies(e -> assertThat(e.getSlug()).as("check slug").isEqualTo(actual.getSlug()))
            .satisfies(e -> assertThat(e.getCapacite()).as("check capacite").isEqualTo(actual.getCapacite()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getDeleteAt()).as("check deleteAt").isEqualTo(actual.getDeleteAt()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntrepotUpdatableRelationshipsEquals(Entrepot expected, Entrepot actual) {
        assertThat(expected)
            .as("Verify Entrepot relationships")
            .satisfies(e -> assertThat(e.getStructure()).as("check structure").isEqualTo(actual.getStructure()));
    }
}
