package ga.aninf.stock.domain;

import static ga.aninf.stock.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PlansAbonnementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlansAbonnementAllPropertiesEquals(PlansAbonnement expected, PlansAbonnement actual) {
        assertPlansAbonnementAutoGeneratedPropertiesEquals(expected, actual);
        assertPlansAbonnementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlansAbonnementAllUpdatablePropertiesEquals(PlansAbonnement expected, PlansAbonnement actual) {
        assertPlansAbonnementUpdatableFieldsEquals(expected, actual);
        assertPlansAbonnementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlansAbonnementAutoGeneratedPropertiesEquals(PlansAbonnement expected, PlansAbonnement actual) {
        assertThat(expected)
            .as("Verify PlansAbonnement auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlansAbonnementUpdatableFieldsEquals(PlansAbonnement expected, PlansAbonnement actual) {
        assertThat(expected)
            .as("Verify PlansAbonnement relevant properties")
            .satisfies(e -> assertThat(e.getLibelle()).as("check libelle").isEqualTo(actual.getLibelle()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getPrix()).as("check prix").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrix()))
            .satisfies(e -> assertThat(e.getDuree()).as("check duree").isEqualTo(actual.getDuree()))
            .satisfies(e -> assertThat(e.getAvantage()).as("check avantage").isEqualTo(actual.getAvantage()))
            .satisfies(e -> assertThat(e.getDeleteAt()).as("check deleteAt").isEqualTo(actual.getDeleteAt()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlansAbonnementUpdatableRelationshipsEquals(PlansAbonnement expected, PlansAbonnement actual) {}
}
