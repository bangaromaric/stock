package ga.aninf.stock.domain;

import static ga.aninf.stock.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProduitAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProduitAllPropertiesEquals(Produit expected, Produit actual) {
        assertProduitAutoGeneratedPropertiesEquals(expected, actual);
        assertProduitAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProduitAllUpdatablePropertiesEquals(Produit expected, Produit actual) {
        assertProduitUpdatableFieldsEquals(expected, actual);
        assertProduitUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProduitAutoGeneratedPropertiesEquals(Produit expected, Produit actual) {
        assertThat(expected)
            .as("Verify Produit auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProduitUpdatableFieldsEquals(Produit expected, Produit actual) {
        assertThat(expected)
            .as("Verify Produit relevant properties")
            .satisfies(e -> assertThat(e.getLibelle()).as("check libelle").isEqualTo(actual.getLibelle()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getSlug()).as("check slug").isEqualTo(actual.getSlug()))
            .satisfies(
                e ->
                    assertThat(e.getPrixUnitaire())
                        .as("check prixUnitaire")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPrixUnitaire())
            )
            .satisfies(e -> assertThat(e.getDateExpiration()).as("check dateExpiration").isEqualTo(actual.getDateExpiration()))
            .satisfies(e -> assertThat(e.getDeleteAt()).as("check deleteAt").isEqualTo(actual.getDeleteAt()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProduitUpdatableRelationshipsEquals(Produit expected, Produit actual) {
        assertThat(expected)
            .as("Verify Produit relationships")
            .satisfies(e -> assertThat(e.getCategorie()).as("check categorie").isEqualTo(actual.getCategorie()));
    }
}
