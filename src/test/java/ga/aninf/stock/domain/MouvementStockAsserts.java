package ga.aninf.stock.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MouvementStockAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMouvementStockAllPropertiesEquals(MouvementStock expected, MouvementStock actual) {
        assertMouvementStockAutoGeneratedPropertiesEquals(expected, actual);
        assertMouvementStockAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMouvementStockAllUpdatablePropertiesEquals(MouvementStock expected, MouvementStock actual) {
        assertMouvementStockUpdatableFieldsEquals(expected, actual);
        assertMouvementStockUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMouvementStockAutoGeneratedPropertiesEquals(MouvementStock expected, MouvementStock actual) {
        assertThat(expected)
            .as("Verify MouvementStock auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMouvementStockUpdatableFieldsEquals(MouvementStock expected, MouvementStock actual) {
        assertThat(expected)
            .as("Verify MouvementStock relevant properties")
            .satisfies(e -> assertThat(e.getQuantite()).as("check quantite").isEqualTo(actual.getQuantite()))
            .satisfies(e -> assertThat(e.getTypeMouvement()).as("check typeMouvement").isEqualTo(actual.getTypeMouvement()))
            .satisfies(e -> assertThat(e.getTransactionDate()).as("check transactionDate").isEqualTo(actual.getTransactionDate()))
            .satisfies(e -> assertThat(e.getDeleteAt()).as("check deleteAt").isEqualTo(actual.getDeleteAt()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMouvementStockUpdatableRelationshipsEquals(MouvementStock expected, MouvementStock actual) {
        assertThat(expected)
            .as("Verify MouvementStock relationships")
            .satisfies(e -> assertThat(e.getProduit()).as("check produit").isEqualTo(actual.getProduit()))
            .satisfies(e -> assertThat(e.getEntrepot()).as("check entrepot").isEqualTo(actual.getEntrepot()));
    }
}
