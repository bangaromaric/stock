package ga.aninf.stock.domain;

import static ga.aninf.stock.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class VenteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenteAllPropertiesEquals(Vente expected, Vente actual) {
        assertVenteAutoGeneratedPropertiesEquals(expected, actual);
        assertVenteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenteAllUpdatablePropertiesEquals(Vente expected, Vente actual) {
        assertVenteUpdatableFieldsEquals(expected, actual);
        assertVenteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenteAutoGeneratedPropertiesEquals(Vente expected, Vente actual) {
        assertThat(expected)
            .as("Verify Vente auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenteUpdatableFieldsEquals(Vente expected, Vente actual) {
        assertThat(expected)
            .as("Verify Vente relevant properties")
            .satisfies(e -> assertThat(e.getQuantite()).as("check quantite").isEqualTo(actual.getQuantite()))
            .satisfies(
                e -> assertThat(e.getMontant()).as("check montant").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getMontant())
            )
            .satisfies(e -> assertThat(e.getVenteDate()).as("check venteDate").isEqualTo(actual.getVenteDate()))
            .satisfies(e -> assertThat(e.getDeleteAt()).as("check deleteAt").isEqualTo(actual.getDeleteAt()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenteUpdatableRelationshipsEquals(Vente expected, Vente actual) {
        assertThat(expected)
            .as("Verify Vente relationships")
            .satisfies(e -> assertThat(e.getProduit()).as("check produit").isEqualTo(actual.getProduit()))
            .satisfies(e -> assertThat(e.getStructure()).as("check structure").isEqualTo(actual.getStructure()));
    }
}
