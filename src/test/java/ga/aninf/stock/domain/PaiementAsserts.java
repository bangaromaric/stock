package ga.aninf.stock.domain;

import static ga.aninf.stock.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PaiementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaiementAllPropertiesEquals(Paiement expected, Paiement actual) {
        assertPaiementAutoGeneratedPropertiesEquals(expected, actual);
        assertPaiementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaiementAllUpdatablePropertiesEquals(Paiement expected, Paiement actual) {
        assertPaiementUpdatableFieldsEquals(expected, actual);
        assertPaiementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaiementAutoGeneratedPropertiesEquals(Paiement expected, Paiement actual) {
        assertThat(expected)
            .as("Verify Paiement auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaiementUpdatableFieldsEquals(Paiement expected, Paiement actual) {
        assertThat(expected)
            .as("Verify Paiement relevant properties")
            .satisfies(
                e -> assertThat(e.getMontant()).as("check montant").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getMontant())
            )
            .satisfies(e -> assertThat(e.getMethodePaiement()).as("check methodePaiement").isEqualTo(actual.getMethodePaiement()))
            .satisfies(e -> assertThat(e.getStatutPaiement()).as("check statutPaiement").isEqualTo(actual.getStatutPaiement()))
            .satisfies(e -> assertThat(e.getDeleteAt()).as("check deleteAt").isEqualTo(actual.getDeleteAt()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaiementUpdatableRelationshipsEquals(Paiement expected, Paiement actual) {
        assertThat(expected)
            .as("Verify Paiement relationships")
            .satisfies(e -> assertThat(e.getPlansAbonnement()).as("check plansAbonnement").isEqualTo(actual.getPlansAbonnement()));
    }
}
